// Copyright 2018 Ulf Adams
//
// The contents of this file may be used under the terms of the Apache License,
// Version 2.0.
//
//    (See accompanying file LICENSE-Apache or copy at
//     http://www.apache.org/licenses/LICENSE-2.0)
//
// Alternatively, the contents of this file may be used under the terms of
// the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE-Boost or copy at
//     https://www.boost.org/LICENSE_1_0.txt)
//
// Unless required by applicable law or agreed to in writing, this software
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.
#ifndef RYU_GENERIC128_H
#define RYU_GENERIC128_H

#include <assert.h>
#include <stdint.h>

typedef __uint128_t uint128_t;

#define FLOAT_128_POW5_INV_BITCOUNT 249
#define FLOAT_128_POW5_BITCOUNT 249
#define POW5_TABLE_SIZE 56

// These tables are ~4.5 kByte total, compared to ~160 kByte for the full tables.

// There's no way to define 128-bit constants in C, so we use little-endian
// pairs of 64-bit constants.
static const uint64_t GENERIC_POW5_TABLE[POW5_TABLE_SIZE][2] = {
 {                    1ull,                    0ull },
 {                    5ull,                    0ull },
 {                   25ull,                    0ull },
 {                  125ull,                    0ull },
 {                  625ull,                    0ull },
 {                 3125ull,                    0ull },
 {                15625ull,                    0ull },
 {                78125ull,                    0ull },
 {               390625ull,                    0ull },
 {              1953125ull,                    0ull },
 {              9765625ull,                    0ull },
 {             48828125ull,                    0ull },
 {            244140625ull,                    0ull },
 {           1220703125ull,                    0ull },
 {           6103515625ull,                    0ull },
 {          30517578125ull,                    0ull },
 {         152587890625ull,                    0ull },
 {         762939453125ull,                    0ull },
 {        3814697265625ull,                    0ull },
 {       19073486328125ull,                    0ull },
 {       95367431640625ull,                    0ull },
 {      476837158203125ull,                    0ull },
 {     2384185791015625ull,                    0ull },
 {    11920928955078125ull,                    0ull },
 {    59604644775390625ull,                    0ull },
 {   298023223876953125ull,                    0ull },
 {  1490116119384765625ull,                    0ull },
 {  7450580596923828125ull,                    0ull },
 {   359414837200037393ull,                    2ull },
 {  1797074186000186965ull,                   10ull },
 {  8985370930000934825ull,                   50ull },
 {  8033366502585570893ull,                  252ull },
 {  3273344365508751233ull,                 1262ull },
 { 16366721827543756165ull,                 6310ull },
 {  8046632842880574361ull,                31554ull },
 {  3339676066983768573ull,               157772ull },
 { 16698380334918842865ull,               788860ull },
 {  9704925379756007861ull,              3944304ull },
 { 11631138751360936073ull,             19721522ull },
 {  2815461535676025517ull,             98607613ull },
 { 14077307678380127585ull,            493038065ull },
 { 15046306170771983077ull,           2465190328ull },
 {  1444554559021708921ull,          12325951644ull },
 {  7222772795108544605ull,          61629758220ull },
 { 17667119901833171409ull,         308148791101ull },
 { 14548623214327650581ull,        1540743955509ull },
 { 17402883850509598057ull,        7703719777548ull },
 { 13227442957709783821ull,       38518598887744ull },
 { 10796982567420264257ull,      192592994438723ull },
 { 17091424689682218053ull,      962964972193617ull },
 { 11670147153572883801ull,     4814824860968089ull },
 {  3010503546735764157ull,    24074124304840448ull },
 { 15052517733678820785ull,   120370621524202240ull },
 {  1475612373555897461ull,   601853107621011204ull },
 {  7378061867779487305ull,  3009265538105056020ull },
 { 18443565265187884909ull, 15046327690525280101ull }
};

static const uint64_t GENERIC_POW5_SPLIT[89][4] = {
 {                    0ull,                    0ull,                    0ull,    72057594037927936ull },
 {                    0ull,  5206161169240293376ull,  4575641699882439235ull,    73468396926392969ull },
 {  3360510775605221349ull,  6983200512169538081ull,  4325643253124434363ull,    74906821675075173ull },
 { 11917660854915489451ull,  9652941469841108803ull,   946308467778435600ull,    76373409087490117ull },
 {  1994853395185689235ull, 16102657350889591545ull,  6847013871814915412ull,    77868710555449746ull },
 {   958415760277438274ull, 15059347134713823592ull,  7329070255463483331ull,    79393288266368765ull },
 {  2065144883315240188ull,  7145278325844925976ull, 14718454754511147343ull,    80947715414629833ull },
 {  8980391188862868935ull, 13709057401304208685ull,  8230434828742694591ull,    82532576417087045ull },
 {   432148644612782575ull,  7960151582448466064ull, 12056089168559840552ull,    84148467132788711ull },
 {   484109300864744403ull, 15010663910730448582ull, 16824949663447227068ull,    85795995087002057ull },
 { 14793711725276144220ull, 16494403799991899904ull, 10145107106505865967ull,    87475779699624060ull },
 { 15427548291869817042ull, 12330588654550505203ull, 13980791795114552342ull,    89188452518064298ull },
 {  9979404135116626552ull, 13477446383271537499ull, 14459862802511591337ull,    90934657454687378ull },
 { 12385121150303452775ull,  9097130814231585614ull,  6523855782339765207ull,    92715051028904201ull },
 {  1822931022538209743ull, 16062974719797586441ull,  3619180286173516788ull,    94530302614003091ull },
 { 12318611738248470829ull, 13330752208259324507ull, 10986694768744162601ull,    96381094688813589ull },
 { 13684493829640282333ull,  7674802078297225834ull, 15208116197624593182ull,    98268123094297527ull },
 {  5408877057066295332ull,  6470124174091971006ull, 15112713923117703147ull,   100192097295163851ull },
 { 11407083166564425062ull, 18189998238742408185ull,  4337638702446708282ull,   102153740646605557ull },
 {  4112405898036935485ull,   924624216579956435ull, 14251108172073737125ull,   104153790666259019ull },
 { 16996739107011444789ull, 10015944118339042475ull,  2395188869672266257ull,   106192999311487969ull },
 {  4588314690421337879ull,  5339991768263654604ull, 15441007590670620066ull,   108272133262096356ull },
 {  2286159977890359825ull, 14329706763185060248ull,  5980012964059367667ull,   110391974208576409ull },
 {  9654767503237031099ull, 11293544302844823188ull, 11739932712678287805ull,   112553319146000238ull },
 { 11362964448496095896ull,  7990659682315657680ull,   251480263940996374ull,   114756980673665505ull },
 {  1423410421096377129ull, 14274395557581462179ull, 16553482793602208894ull,   117003787300607788ull },
 {  2070444190619093137ull, 11517140404712147401ull, 11657844572835578076ull,   119294583757094535ull },
 {  7648316884775828921ull, 15264332483297977688ull,   247182277434709002ull,   121630231312217685ull },
 { 17410896758132241352ull, 10923914482914417070ull, 13976383996795783649ull,   124011608097704390ull },
 {  9542674537907272703ull,  3079432708831728956ull, 14235189590642919676ull,   126439609438067572ull },
 { 10364666969937261816ull,  8464573184892924210ull, 12758646866025101190ull,   128915148187220428ull },
 { 14720354822146013883ull, 11480204489231511423ull,  7449876034836187038ull,   131439155071681461ull },
 {  1692907053653558553ull, 17835392458598425233ull,  1754856712536736598ull,   134012579040499057ull },
 {  5620591334531458755ull, 11361776175667106627ull, 13350215315297937856ull,   136636387622027174ull },
 { 17455759733928092601ull, 10362573084069962561ull, 11246018728801810510ull,   139311567287686283ull },
 {  2465404073814044982ull, 17694822665274381860ull,  1509954037718722697ull,   142039123822846312ull },
 {  2152236053329638369ull, 11202280800589637091ull, 16388426812920420176ull,    72410041352485523ull },
 { 17319024055671609028ull, 10944982848661280484ull,  2457150158022562661ull,    73827744744583080ull },
 { 17511219308535248024ull,  5122059497846768077ull,  2089605804219668451ull,    75273205100637900ull },
 { 10082673333144031533ull, 14429008783411894887ull, 12842832230171903890ull,    76746965869337783ull },
 { 16196653406315961184ull, 10260180891682904501ull, 10537411930446752461ull,    78249581139456266ull },
 { 15084422041749743389ull,   234835370106753111ull, 16662517110286225617ull,    79781615848172976ull },
 {  8199644021067702606ull,  3787318116274991885ull,  7438130039325743106ull,    81343645993472659ull },
 { 12039493937039359765ull,  9773822153580393709ull,  5945428874398357806ull,    82936258850702722ull },
 {   984543865091303961ull,  7975107621689454830ull,  6556665988501773347ull,    84560053193370726ull },
 {  9633317878125234244ull, 16099592426808915028ull,  9706674539190598200ull,    86215639518264828ull },
 {  6860695058870476186ull,  4471839111886709592ull,  7828342285492709568ull,    87903640274981819ull },
 { 14583324717644598331ull,  4496120889473451238ull,  5290040788305728466ull,    89624690099949049ull },
 { 18093669366515003715ull, 12879506572606942994ull, 18005739787089675377ull,    91379436055028227ull },
 { 17997493966862379937ull, 14646222655265145582ull, 10265023312844161858ull,    93168537870790806ull },
 { 12283848109039722318ull, 11290258077250314935ull,  9878160025624946825ull,    94992668194556404ull },
 {  8087752761883078164ull,  5262596608437575693ull, 11093553063763274413ull,    96852512843287537ull },
 { 15027787746776840781ull, 12250273651168257752ull,  9290470558712181914ull,    98748771061435726ull },
 { 15003915578366724489ull,  2937334162439764327ull,  5404085603526796602ull,   100682155783835929ull },
 {  5225610465224746757ull, 14932114897406142027ull,  2774647558180708010ull,   102653393903748137ull },
 { 17112957703385190360ull, 12069082008339002412ull,  3901112447086388439ull,   104663226546146909ull },
 {  4062324464323300238ull,  3992768146772240329ull, 15757196565593695724ull,   106712409346361594ull },
 {  5525364615810306701ull, 11855206026704935156ull, 11344868740897365300ull,   108801712734172003ull },
 {  9274143661888462646ull,  4478365862348432381ull, 18010077872551661771ull,   110931922223466333ull },
 { 12604141221930060148ull,  8930937759942591500ull,  9382183116147201338ull,   113103838707570263ull },
 { 14513929377491886653ull,  1410646149696279084ull,   587092196850797612ull,   115318278760358235ull },
 {  2226851524999454362ull,  7717102471110805679ull,  7187441550995571734ull,   117576074943260147ull },
 {  5527526061344932763ull,  2347100676188369132ull, 16976241418824030445ull,   119878076118278875ull },
 {  6088479778147221611ull, 17669593130014777580ull, 10991124207197663546ull,   122225147767136307ull },
 { 11107734086759692041ull,  3391795220306863431ull, 17233960908859089158ull,   124618172316667879ull },
 {  7913172514655155198ull, 17726879005381242552ull,   641069866244011540ull,   127058049470587962ull },
 { 12596991768458713949ull, 15714785522479904446ull,  6035972567136116512ull,   129545696547750811ull },
 { 16901996933781815980ull,  4275085211437148707ull, 14091642539965169063ull,   132082048827034281ull },
 {  7524574627987869240ull, 15661204384239316051ull,  2444526454225712267ull,   134668059898975949ull },
 {  8199251625090479942ull,  6803282222165044067ull, 16064817666437851504ull,   137304702024293857ull },
 {  4453256673338111920ull, 15269922543084434181ull,  3139961729834750852ull,   139992966499426682ull },
 { 15841763546372731299ull,  3013174075437671812ull,  4383755396295695606ull,   142733864029230733ull },
 {  9771896230907310329ull,  4900659362437687569ull, 12386126719044266361ull,    72764212553486967ull },
 {  9420455527449565190ull,  1859606122611023693ull,  6555040298902684281ull,    74188850200884818ull },
 {  5146105983135678095ull,  2287300449992174951ull,  4325371679080264751ull,    75641380576797959ull },
 { 11019359372592553360ull,  8422686425957443718ull,  7175176077944048210ull,    77122349788024458ull },
 { 11005742969399620716ull,  4132174559240043701ull,  9372258443096612118ull,    78632314633490790ull },
 {  8887589641394725840ull,  8029899502466543662ull, 14582206497241572853ull,    80171842813591127ull },
 {   360247523705545899ull, 12568341805293354211ull, 14653258284762517866ull,    81741513143625247ull },
 { 12314272731984275834ull,  4740745023227177044ull,  6141631472368337539ull,    83341915771415304ull },
 {   441052047733984759ull,  7940090120939869826ull, 11750200619921094248ull,    84973652399183278ull },
 {  3436657868127012749ull,  9187006432149937667ull, 16389726097323041290ull,    86637336509772529ull },
 { 13490220260784534044ull, 15339072891382896702ull,  8846102360835316895ull,    88333593597298497ull },
 {  4125672032094859833ull,   158347675704003277ull, 10592598512749774447ull,    90063061402315272ull },
 { 12189928252974395775ull,  2386931199439295891ull,  7009030566469913276ull,    91826390151586454ull },
 {  9256479608339282969ull,  2844900158963599229ull, 11148388908923225596ull,    93624242802550437ull },
 { 11584393507658707408ull,  2863659090805147914ull,  9873421561981063551ull,    95457295292572042ull },
 { 13984297296943171390ull,  1931468383973130608ull, 12905719743235082319ull,    97326236793074198ull },
 {  5837045222254987499ull, 10213498696735864176ull, 14893951506257020749ull,    99231769968645227ull }
};

// Unfortunately, the results are sometimes off by one or two. We use an additional
// lookup table to store those cases and adjust the result.
static const uint64_t POW5_ERRORS[156] = {
 0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull, 0x9555596400000000ull,
 0x65a6569525565555ull, 0x4415551445449655ull, 0x5105015504144541ull, 0x65a69969a6965964ull,
 0x5054955969959656ull, 0x5105154515554145ull, 0x4055511051591555ull, 0x5500514455550115ull,
 0x0041140014145515ull, 0x1005440545511051ull, 0x0014405450411004ull, 0x0414440010500000ull,
 0x0044000440010040ull, 0x5551155000004001ull, 0x4554555454544114ull, 0x5150045544005441ull,
 0x0001111400054501ull, 0x6550955555554554ull, 0x1504159645559559ull, 0x4105055141454545ull,
 0x1411541410405454ull, 0x0415555044545555ull, 0x0014154115405550ull, 0x1540055040411445ull,
 0x0000000500000000ull, 0x5644000000000000ull, 0x1155555591596555ull, 0x0410440054569565ull,
 0x5145100010010005ull, 0x0555041405500150ull, 0x4141450455140450ull, 0x0000000144000140ull,
 0x5114004001105410ull, 0x4444100404005504ull, 0x0414014410001015ull, 0x5145055155555015ull,
 0x0141041444445540ull, 0x0000100451541414ull, 0x4105041104155550ull, 0x0500501150451145ull,
 0x1001050000004114ull, 0x5551504400141045ull, 0x5110545410151454ull, 0x0100001400004040ull,
 0x5040010111040000ull, 0x0140000150541100ull, 0x4400140400104110ull, 0x5011014405545004ull,
 0x0000000044155440ull, 0x0000000010000000ull, 0x1100401444440001ull, 0x0040401010055111ull,
 0x5155155551405454ull, 0x0444440015514411ull, 0x0054505054014101ull, 0x0451015441115511ull,
 0x1541411401140551ull, 0x4155104514445110ull, 0x4141145450145515ull, 0x5451445055155050ull,
 0x4400515554110054ull, 0x5111145104501151ull, 0x565a655455500501ull, 0x5565555555525955ull,
 0x0550511500405695ull, 0x4415504051054544ull, 0x6555595965555554ull, 0x0100915915555655ull,
 0x5540001510001001ull, 0x5450051414000544ull, 0x1405010555555551ull, 0x5555515555644155ull,
 0x5555055595496555ull, 0x5451045004415000ull, 0x5450510144040144ull, 0x5554155555556455ull,
 0x5051555495415555ull, 0x5555554555555545ull, 0x0000000010005455ull, 0x4000005000040000ull,
 0x5565555555555954ull, 0x5554559555555505ull, 0x9645545495552555ull, 0x4000400055955564ull,
 0x0040000000000001ull, 0x4004100100000000ull, 0x5540040440000411ull, 0x4565555955545644ull,
 0x1140659549651556ull, 0x0100000410010000ull, 0x5555515400004001ull, 0x5955545555155255ull,
 0x5151055545505556ull, 0x5051454510554515ull, 0x0501500050415554ull, 0x5044154005441005ull,
 0x1455445450550455ull, 0x0010144055144545ull, 0x0000401100000004ull, 0x1050145050000010ull,
 0x0415004554011540ull, 0x1000510100151150ull, 0x0100040400001144ull, 0x0000000000000000ull,
 0x0550004400000100ull, 0x0151145041451151ull, 0x0000400400005450ull, 0x0000100044010004ull,
 0x0100054100050040ull, 0x0504400005410010ull, 0x4011410445500105ull, 0x0000404000144411ull,
 0x0101504404500000ull, 0x0000005044400400ull, 0x0000000014000100ull, 0x0404440414000000ull,
 0x5554100410000140ull, 0x4555455544505555ull, 0x5454105055455455ull, 0x0115454155454015ull,
 0x4404110000045100ull, 0x4400001100101501ull, 0x6596955956966a94ull, 0x0040655955665965ull,
 0x5554144400100155ull, 0xa549495401011041ull, 0x5596555565955555ull, 0x5569965959549555ull,
 0x969565a655555456ull, 0x0000001000000000ull, 0x0000000040000140ull, 0x0000040100000000ull,
 0x1415454400000000ull, 0x5410415411454114ull, 0x0400040104000154ull, 0x0504045000000411ull,
 0x0000001000000010ull, 0x5554000000001040ull, 0x5549155551556595ull, 0x1455541055515555ull,
 0x0510555454554541ull, 0x9555555555540455ull, 0x6455456555556465ull, 0x4524565555654514ull,
 0x5554655255559545ull, 0x9555455441155556ull, 0x0000000051515555ull, 0x0010005040000550ull,
 0x5044044040000000ull, 0x1045040440010500ull, 0x0000400000040000ull, 0x0000000000000000u
};

static const uint64_t GENERIC_POW5_INV_SPLIT[89][4] = {
 {                    0ull,                    0ull,                    0ull,   144115188075855872ull },
 {  1573859546583440065ull,  2691002611772552616ull,  6763753280790178510ull,   141347765182270746ull },
 { 12960290449513840412ull, 12345512957918226762ull, 18057899791198622765ull,   138633484706040742ull },
 {  7615871757716765416ull,  9507132263365501332ull,  4879801712092008245ull,   135971326161092377ull },
 {  7869961150745287587ull,  5804035291554591636ull,  8883897266325833928ull,   133360288657597085ull },
 {  2942118023529634767ull, 15128191429820565086ull, 10638459445243230718ull,   130799390525667397ull },
 { 14188759758411913794ull,  5362791266439207815ull,  8068821289119264054ull,   128287668946279217ull },
 {  7183196927902545212ull,  1952291723540117099ull, 12075928209936341512ull,   125824179589281448ull },
 {  5672588001402349748ull, 17892323620748423487ull,  9874578446960390364ull,   123407996258356868ull },
 {  4442590541217566325ull,  4558254706293456445ull, 10343828952663182727ull,   121038210542800766ull },
 {  3005560928406962566ull,  2082271027139057888ull, 13961184524927245081ull,   118713931475986426ull },
 { 13299058168408384786ull, 17834349496131278595ull,  9029906103900731664ull,   116434285200389047ull },
 {  5414878118283973035ull, 13079825470227392078ull, 17897304791683760280ull,   114198414639042157ull },
 { 14609755883382484834ull, 14991702445765844156ull,  3269802549772755411ull,   112005479173303009ull },
 { 15967774957605076027ull,  2511532636717499923ull, 16221038267832563171ull,   109854654326805788ull },
 {  9269330061621627145ull,  3332501053426257392ull, 16223281189403734630ull,   107745131455483836ull },
 { 16739559299223642282ull,  1873986623300664530ull,  6546709159471442872ull,   105676117443544318ull },
 { 17116435360051202055ull,  1359075105581853924ull,  2038341371621886470ull,   103646834405281051ull },
 { 17144715798009627550ull,  3201623802661132408ull,  9757551605154622431ull,   101656519392613377ull },
 { 17580479792687825857ull,  6546633380567327312ull, 15099972427870912398ull,    99704424108241124ull },
 {  9726477118325522902ull, 14578369026754005435ull, 11728055595254428803ull,    97789814624307808ull },
 {   134593949518343635ull,  5715151379816901985ull,  1660163707976377376ull,    95911971106466306ull },
 {  5515914027713859358ull,  7124354893273815720ull,  5548463282858794077ull,    94070187543243255ull },
 {  6188403395862945512ull,  5681264392632320838ull, 15417410852121406654ull,    92263771480600430ull },
 { 15908890877468271457ull, 10398888261125597540ull,  4817794962769172309ull,    90492043761593298ull },
 {  1413077535082201005ull, 12675058125384151580ull,  7731426132303759597ull,    88754338271028867ull },
 {  1486733163972670293ull, 11369385300195092554ull, 11610016711694864110ull,    87050001685026843ull },
 {  8788596583757589684ull,  3978580923851924802ull,  9255162428306775812ull,    85378393225389919ull },
 {  7203518319660962120ull, 15044736224407683725ull,  2488132019818199792ull,    83738884418690858ull },
 {  4004175967662388707ull, 18236988667757575407ull, 15613100370957482671ull,    82130858859985791ull },
 { 18371903370586036463ull,    53497579022921640ull, 16465963977267203307ull,    80553711981064899ull },
 { 10170778323887491315ull,  1999668801648976001ull, 10209763593579456445ull,    79006850823153334ull },
 { 17108131712433974546ull, 16825784443029944237ull,  2078700786753338945ull,    77489693813976938ull },
 { 17221789422665858532ull, 12145427517550446164ull,  5391414622238668005ull,    76001670549108934ull },
 {  4859588996898795878ull,  1715798948121313204ull,  3950858167455137171ull,    74542221577515387ull },
 { 13513469241795711526ull,   631367850494860526ull, 10517278915021816160ull,    73110798191218799ull },
 { 11757513142672073111ull,  2581974932255022228ull, 17498959383193606459ull,   143413724438001539ull },
 { 14524355192525042817ull,  5640643347559376447ull,  1309659274756813016ull,   140659771648132296ull },
 {  2765095348461978538ull, 11021111021896007722ull,  3224303603779962366ull,   137958702611185230ull },
 { 12373410389187981037ull, 13679193545685856195ull, 11644609038462631561ull,   135309501808182158ull },
 { 12813176257562780151ull,  3754199046160268020ull,  9954691079802960722ull,   132711173221007413ull },
 { 17557452279667723458ull,  3237799193992485824ull, 17893947919029030695ull,   130162739957935629ull },
 { 14634200999559435155ull,  4123869946105211004ull,  6955301747350769239ull,   127663243886350468ull },
 {  2185352760627740240ull,  2864813346878886844ull, 13049218671329690184ull,   125211745272516185ull },
 {  6143438674322183002ull, 10464733336980678750ull,  6982925169933978309ull,   122807322428266620ull },
 {  1099509117817174576ull, 10202656147550524081ull,   754997032816608484ull,   120449071364478757ull },
 {  2410631293559367023ull, 17407273750261453804ull, 15307291918933463037ull,   118136105451200587ull },
 { 12224968375134586697ull,  1664436604907828062ull, 11506086230137787358ull,   115867555084305488ull },
 {  3495926216898000888ull, 18392536965197424288ull, 10992889188570643156ull,   113642567358547782ull },
 {  8744506286256259680ull,  3966568369496879937ull, 18342264969761820037ull,   111460305746896569ull },
 {  7689600520560455039ull,  5254331190877624630ull,  9628558080573245556ull,   109319949786027263ull },
 { 11862637625618819436ull,  3456120362318976488ull, 14690471063106001082ull,   107220694767852583ull },
 {  5697330450030126444ull, 12424082405392918899ull,   358204170751754904ull,   105161751436977040ull },
 { 11257457505097373622ull, 15373192700214208870ull,   671619062372033814ull,   103142345693961148ull },
 { 16850355018477166700ull,  1913910419361963966ull,  4550257919755970531ull,   101161718304283822ull },
 {  9670835567561997011ull, 10584031339132130638ull,  3060560222974851757ull,    99219124612893520ull },
 {  7698686577353054710ull, 11689292838639130817ull, 11806331021588878241ull,    97313834264240819ull },
 { 12233569599615692137ull,  3347791226108469959ull, 10333904326094451110ull,    95445130927687169ull },
 { 13049400362825383933ull, 17142621313007799680ull,  3790542585289224168ull,    93612312028186576ull },
 { 12430457242474442072ull,  5625077542189557960ull, 14765055286236672238ull,    91814688482138969ull },
 {  4759444137752473128ull,  2230562561567025078ull,  4954443037339580076ull,    90051584438315940ull },
 {  7246913525170274758ull,  8910297835195760709ull,  4015904029508858381ull,    88322337023761438ull },
 { 12854430245836432067ull,  8135139748065431455ull, 11548083631386317976ull,    86626296094571907ull },
 {  4848827254502687803ull,  4789491250196085625ull,  3988192420450664125ull,    84962823991462151ull },
 {  7435538409611286684ull,   904061756819742353ull, 14598026519493048444ull,    83331295300025028ull },
 { 11042616160352530997ull,  8948390828345326218ull, 10052651191118271927ull,    81731096615594853ull },
 { 11059348291563778943ull, 11696515766184685544ull,  3783210511290897367ull,    80161626312626082ull },
 {  7020010856491885826ull,  5025093219346041680ull,  8960210401638911765ull,    78622294318500592ull },
 { 17732844474490699984ull,  7820866704994446502ull,  6088373186798844243ull,    77112521891678506ull },
 {   688278527545590501ull,  3045610706602776618ull,  8684243536999567610ull,    75631741404109150ull },
 {  2734573255120657297ull,  3903146411440697663ull,  9470794821691856713ull,    74179396127820347ull },
 { 15996457521023071259ull,  4776627823451271680ull, 12394856457265744744ull,    72754940025605801ull },
 { 13492065758834518331ull,  7390517611012222399ull,  1630485387832860230ull,   142715675091463768ull },
 { 13665021627282055864ull,  9897834675523659302ull, 17907668136755296849ull,   139975126841173266ull },
 {  9603773719399446181ull, 10771916301484339398ull, 10672699855989487527ull,   137287204938390542ull },
 {  3630218541553511265ull,  8139010004241080614ull,  2876479648932814543ull,   134650898807055963ull },
 {  8318835909686377084ull,  9525369258927993371ull,  2796120270400437057ull,   132065217277054270ull },
 { 11190003059043290163ull, 12424345635599592110ull, 12539346395388933763ull,   129529188211565064ull },
 {  8701968833973242276ull,   820569587086330727ull,  2315591597351480110ull,   127041858141569228ull },
 {  5115113890115690487ull, 16906305245394587826ull,  9899749468931071388ull,   124602291907373862ull },
 { 15543535488939245974ull, 10945189844466391399ull,  3553863472349432246ull,   122209572307020975ull },
 {  7709257252608325038ull,  1191832167690640880ull, 15077137020234258537ull,   119862799751447719ull },
 {  7541333244210021737ull,  9790054727902174575ull,  5160944773155322014ull,   117561091926268545ull },
 { 12297384708782857832ull,  1281328873123467374ull,  4827925254630475769ull,   115303583460052092ull },
 { 13243237906232367265ull, 15873887428139547641ull,  3607993172301799599ull,   113089425598968120ull },
 { 11384616453739611114ull, 15184114243769211033ull, 13148448124803481057ull,   110917785887682141ull },
 { 17727970963596660683ull,  1196965221832671990ull, 14537830463956404138ull,   108787847856377790ull },
 { 17241367586707330931ull,  8880584684128262874ull, 11173506540726547818ull,   106698810713789254ull },
 {  7184427196661305643ull, 14332510582433188173ull, 14230167953789677901ull,   104649889046128358ull }
};

static const uint64_t POW5_INV_ERRORS[154] = {
 0x1144155514145504ull, 0x0000541555401141ull, 0x0000000000000000ull, 0x0154454000000000ull,
 0x4114105515544440ull, 0x0001001111500415ull, 0x4041411410011000ull, 0x5550114515155014ull,
 0x1404100041554551ull, 0x0515000450404410ull, 0x5054544401140004ull, 0x5155501005555105ull,
 0x1144141000105515ull, 0x0541500000500000ull, 0x1104105540444140ull, 0x4000015055514110ull,
 0x0054010450004005ull, 0x4155515404100005ull, 0x5155145045155555ull, 0x1511555515440558ull,
 0x5558544555515555ull, 0x0000000000000010ull, 0x5004000000000050ull, 0x1415510100000010ull,
 0x4545555444514500ull, 0x5155151555555551ull, 0x1441540144044554ull, 0x5150104045544400ull,
 0x5450545401444040ull, 0x5554455045501400ull, 0x4655155555555145ull, 0x1000010055455055ull,
 0x1000004000055004ull, 0x4455405104000005ull, 0x4500114504150545ull, 0x0000000014000000ull,
 0x5450000000000000ull, 0x5514551511445555ull, 0x4111501040555451ull, 0x4515445500054444ull,
 0x5101500104100441ull, 0x1545115155545055ull, 0x0000000000000000ull, 0x1554000000100000ull,
 0x5555545595551555ull, 0x5555051851455955ull, 0x5555555555555559ull, 0x0000400011001555ull,
 0x0000004400040000ull, 0x5455511555554554ull, 0x5614555544115445ull, 0x6455156145555155ull,
 0x5455855455415455ull, 0x5515555144555545ull, 0x0114400000145155ull, 0x0000051000450511ull,
 0x4455154554445100ull, 0x4554150141544455ull, 0x65955555559a5965ull, 0x5555555854559559ull,
 0x9569654559616595ull, 0x1040044040005565ull, 0x1010010500011044ull, 0x1554015545154540ull,
 0x4440555401545441ull, 0x1014441450550105ull, 0x4545400410504145ull, 0x5015111541040151ull,
 0x5145051154000410ull, 0x1040001044545044ull, 0x4001400000151410ull, 0x0540000044040000ull,
 0x0510555454411544ull, 0x0400054054141550ull, 0x1001041145001100ull, 0x0000000140000000ull,
 0x0000000014100000ull, 0x1544005454000140ull, 0x4050055505445145ull, 0x0011511104504155ull,
 0x5505544415045055ull, 0x1155154445515554ull, 0x0000000000004555ull, 0x0000000000000000ull,
 0x5101010510400004ull, 0x1514045044440400ull, 0x5515519555515555ull, 0x4554545441555545ull,
 0x1551055955551515ull, 0x0150000011505515ull, 0x0044005040400000ull, 0x0004001004010050ull,
 0x0000051004450414ull, 0x0114001101001144ull, 0x0401000001000001ull, 0x4500010001000401ull,
 0x0004100000005000ull, 0x0105000441101100ull, 0x0455455550454540ull, 0x5404050144105505ull,
 0x4101510540555455ull, 0x1055541411451555ull, 0x5451445110115505ull, 0x1154110010101545ull,
 0x1145140450054055ull, 0x5555565415551554ull, 0x1550559555555555ull, 0x5555541545045141ull,
 0x4555455450500100ull, 0x5510454545554555ull, 0x1510140115045455ull, 0x1001050040111510ull,
 0x5555454555555504ull, 0x9954155545515554ull, 0x6596656555555555ull, 0x0140410051555559ull,
 0x0011104010001544ull, 0x965669659a680501ull, 0x5655a55955556955ull, 0x4015111014404514ull,
 0x1414155554505145ull, 0x0540040011051404ull, 0x1010000000015005ull, 0x0010054050004410ull,
 0x5041104014000100ull, 0x4440010500100001ull, 0x1155510504545554ull, 0x0450151545115541ull,
 0x4000100400110440ull, 0x1004440010514440ull, 0x0000115050450000ull, 0x0545404455541500ull,
 0x1051051555505101ull, 0x5505144554544144ull, 0x4550545555515550ull, 0x0015400450045445ull,
 0x4514155400554415ull, 0x4555055051050151ull, 0x1511441450001014ull, 0x4544554510404414ull,
 0x4115115545545450ull, 0x5500541555551555ull, 0x5550010544155015ull, 0x0144414045545500ull,
 0x4154050001050150ull, 0x5550511111000145ull, 0x1114504055000151ull, 0x5104041101451040ull,
 0x0010501401051441ull, 0x0010501450504401ull, 0x4554585440044444ull, 0x5155555951450455ull,
 0x0040000400105555ull, 0x0000000000000001ull,
};

// Returns e == 0 ? 1 : ceil(log_2(5^e)); requires 0 <= e <= 32768.
static inline uint32_t pow5bits(const int32_t e) {
  assert(e >= 0);
  assert(e <= 1 << 15);
  return (uint32_t) (((e * 163391164108059ull) >> 46) + 1);
}

static inline void mul_128_256_shift(
    const uint64_t* const a, const uint64_t* const b, const uint32_t shift, const uint32_t corr, uint64_t* const result) {
  assert(shift > 0);
  assert(shift < 256);
  const uint128_t b00 = ((uint128_t) a[0]) * b[0]; // 0
  const uint128_t b01 = ((uint128_t) a[0]) * b[1]; // 64
  const uint128_t b02 = ((uint128_t) a[0]) * b[2]; // 128
  const uint128_t b03 = ((uint128_t) a[0]) * b[3]; // 196
  const uint128_t b10 = ((uint128_t) a[1]) * b[0]; // 64
  const uint128_t b11 = ((uint128_t) a[1]) * b[1]; // 128
  const uint128_t b12 = ((uint128_t) a[1]) * b[2]; // 196
  const uint128_t b13 = ((uint128_t) a[1]) * b[3]; // 256

  const uint128_t s0 = b00;       // 0   x
  const uint128_t s1 = b01 + b10; // 64  x
  const uint128_t c1 = s1 < b01;  // 196 x
  const uint128_t s2 = b02 + b11; // 128 x
  const uint128_t c2 = s2 < b02;  // 256 x
  const uint128_t s3 = b03 + b12; // 196 x
  const uint128_t c3 = s3 < b03;  // 324 x

  const uint128_t p0 = s0 + (s1 << 64);                                // 0
  const uint128_t d0 = p0 < b00;                                       // 128
  const uint128_t q1 = s2 + (s1 >> 64) + (s3 << 64);                   // 128
  const uint128_t d1 = q1 < s2;                                        // 256
  const uint128_t p1 = q1 + (c1 << 64) + d0;                           // 128
  const uint128_t d2 = p1 < q1;                                        // 256
  const uint128_t p2 = b13 + (s3 >> 64) + c2 + (c3 << 64) + d1 + d2;   // 256

  if (shift < 128) {
    const uint128_t r0 = corr + ((p0 >> shift) | (p1 << (128 - shift)));
    const uint128_t r1 = ((p1 >> shift) | (p2 << (128 - shift))) + (r0 < corr);
    result[0] = (uint64_t) r0;
    result[1] = (uint64_t) (r0 >> 64);
    result[2] = (uint64_t) r1;
    result[3] = (uint64_t) (r1 >> 64);
  } else if (shift == 128) {
    const uint128_t r0 = corr + p1;
    const uint128_t r1 = p2 + (r0 < corr);
    result[0] = (uint64_t) r0;
    result[1] = (uint64_t) (r0 >> 64);
    result[2] = (uint64_t) r1;
    result[3] = (uint64_t) (r1 >> 64);
  } else {
    const uint128_t r0 = corr + ((p1 >> (shift - 128)) | (p2 << (256 - shift)));
    const uint128_t r1 = (p2 >> (shift - 128)) + (r0 < corr);
    result[0] = (uint64_t) r0;
    result[1] = (uint64_t) (r0 >> 64);
    result[2] = (uint64_t) r1;
    result[3] = (uint64_t) (r1 >> 64);
  }
}

// Computes 5^i in the form required by Ryu, and stores it in the given pointer.
static inline void generic_computePow5(const uint32_t i, uint64_t* const result) {
  const uint32_t base = i / POW5_TABLE_SIZE;
  const uint32_t base2 = base * POW5_TABLE_SIZE;
  const uint64_t* const mul = GENERIC_POW5_SPLIT[base];
  if (i == base2) {
    result[0] = mul[0];
    result[1] = mul[1];
    result[2] = mul[2];
    result[3] = mul[3];
  } else {
    const uint32_t offset = i - base2;
    const uint64_t* const m = GENERIC_POW5_TABLE[offset];
    const uint32_t delta = pow5bits(i) - pow5bits(base2);
    const uint32_t corr = (uint32_t) ((POW5_ERRORS[i / 32] >> (2 * (i % 32))) & 3);
    mul_128_256_shift(m, mul, delta, corr, result);
  }
}

// Computes 5^-i in the form required by Ryu, and stores it in the given pointer.
static inline void generic_computeInvPow5(const uint32_t i, uint64_t* const result) {
  const uint32_t base = (i + POW5_TABLE_SIZE - 1) / POW5_TABLE_SIZE;
  const uint32_t base2 = base * POW5_TABLE_SIZE;
  const uint64_t* const mul = GENERIC_POW5_INV_SPLIT[base]; // 1/5^base2
  if (i == base2) {
    result[0] = mul[0] + 1;
    result[1] = mul[1];
    result[2] = mul[2];
    result[3] = mul[3];
  } else {
    const uint32_t offset = base2 - i;
    const uint64_t* const m = GENERIC_POW5_TABLE[offset]; // 5^offset
    const uint32_t delta = pow5bits(base2) - pow5bits(i);
    const uint32_t corr = (uint32_t) ((POW5_INV_ERRORS[i / 32] >> (2 * (i % 32))) & 3) + 1;
    mul_128_256_shift(m, mul, delta, corr, result);
  }
}

static inline uint32_t pow5Factor(uint128_t value) {
  for (uint32_t count = 0; value > 0; ++count) {
    if (value % 5 != 0) {
      return count;
    }
    value /= 5;
  }
  return 0;
}

// Returns true if value is divisible by 5^p.
static inline bool multipleOfPowerOf5(const uint128_t value, const uint32_t p) {
  // I tried a case distinction on p, but there was no performance difference.
  return pow5Factor(value) >= p;
}

// Returns true if value is divisible by 2^p.
static inline bool multipleOfPowerOf2(const uint128_t value, const uint32_t p) {
  return (value & ((((uint128_t) 1) << p) - 1)) == 0;
}

static inline uint128_t mulShift(const uint128_t m, const uint64_t* const mul, const int32_t j) {
  assert(j > 128);
  uint64_t a[2];
  a[0] = (uint64_t) m;
  a[1] = (uint64_t) (m >> 64);
  uint64_t result[4];
  mul_128_256_shift(a, mul, j, 0, result);
  return (((uint128_t) result[1]) << 64) | result[0];
}

static inline uint32_t decimalLength(const uint128_t v) {
  static uint128_t LARGEST_POW10 = (((uint128_t) 5421010862427522170ull) << 64) | 687399551400673280ull;
  uint128_t p10 = LARGEST_POW10;
  for (uint32_t i = 39; i > 0; i--) {
    if (v >= p10) {
      return i;
    }
    p10 /= 10;
  }
  return 1;
}

// Returns floor(log_10(2^e)).
static inline uint32_t log10Pow2(const int32_t e) {
  // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
  assert(e >= 0);
  assert(e <= 1 << 15);
  return (uint32_t) ((((uint64_t) e) * 169464822037455ull) >> 49);
}

// Returns floor(log_10(5^e)).
static inline uint32_t log10Pow5(const int32_t e) {
  // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
  assert(e >= 0);
  assert(e <= 1 << 15);
  return (uint32_t) ((((uint64_t) e) * 196742565691928ull) >> 48);
}

#endif // RYU_GENERIC128_H
